'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FastTransformer = undefined;

var _child_process = require('child_process');

var _net = require('net');

var _path = require('path');

var _rxjs = require('rxjs');

var _superagent = require('superagent');

var _superagent2 = _interopRequireDefault(_superagent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class FastTransformer {
  static get DEFAULT_ADDRESS() {
    return '127.0.0.1';
  }

  constructor(minifier) {
    let handler = () => this.close().subscribe();

    this._minifier = minifier;
    this._minifier.on('end', handler).on('error', handler);

    this._phpServer = null;
  }

  get listening() {
    return Boolean(this._phpServer && typeof this._phpServer == 'object');
  }

  close() {
    return !this.listening ? _rxjs.Observable.of(null) : new _rxjs.Observable(observer => {
      this._phpServer.process.kill();
      this._phpServer = null;
      observer.next();
      observer.complete();
    });
  }

  listen() {
    if (this.listening) return _rxjs.Observable.of(this._phpServer.port);

    return this._getPort().map(port => {
      let address = FastTransformer.DEFAULT_ADDRESS;
      let args = ['-S', `${address}:${port}`, '-t', (0, _path.join)(__dirname, '../web')];
      this._phpServer = { address, port, process: (0, _child_process.spawn)(this._minifier.binary, args) };
      return port;
    }).delay(1000);
  }

  transform(script) {
    return this.listen().mergeMap(() => _rxjs.Observable.from(_superagent2.default.get(`http://${this._phpServer.address}:${this._phpServer.port}/index.php`).query({ file: script }))).map(res => res.text);
  }

  _getPort() {
    return new _rxjs.Observable(observer => {
      let server = (0, _net.createServer)();
      server.unref();
      server.on('error', err => observer.error(err));

      server.listen(0, FastTransformer.DEFAULT_ADDRESS, () => {
        observer.next(server.address().port);
        server.close(() => observer.complete());
      });
    });
  }
}
exports.FastTransformer = FastTransformer;