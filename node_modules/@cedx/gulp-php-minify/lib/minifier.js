'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Minifier = undefined;

var _stream = require('stream');

var _package = require('../package.json');

var _fast_transformer = require('./fast_transformer');

var _safe_transformer = require('./safe_transformer');

class Minifier extends _stream.Transform {
  constructor(binary = 'php') {
    super({ objectMode: true });

    this.binary = binary;

    this.silent = false;

    this._transformer = new _safe_transformer.SafeTransformer(this);
  }

  get mode() {
    return this._transformer instanceof _fast_transformer.FastTransformer ? 'fast' : 'safe';
  }

  set mode(value) {
    this._transformer = value == 'fast' ? new _fast_transformer.FastTransformer(this) : new _safe_transformer.SafeTransformer(this);
  }

  _transform(file, encoding, callback) {
    if (!this.silent) console.log(`Minifying: ${file.path}`);

    this._transformer.transform(file.path).subscribe({
      error: err => callback(new Error(`[${_package.name}] ${err.message}`)),
      next: data => {
        file.contents = Buffer.from(data, encoding);
        callback(null, file);
      }
    });
  }
}
exports.Minifier = Minifier;